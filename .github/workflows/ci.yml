name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test-and-lint:
    name: Test, Lint and Coverage
    runs-on: ubuntu-latest
    
    # PostgreSQL service container for integration tests
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Environment variables for database connection
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/go-labs-tst?sslmode=disable&search_path=billing
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: go-labs-tst
      DB_SSLMODE: disable
      APP_ENV: test

    steps:
      # 1. Checkout Code
      - uses: actions/checkout@v4

      # 2. Setup Go with built-in caching
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      # 3. Download dependencies
      - name: Download dependencies
        run: go mod download

      # 4. Code Formatting Check
      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      # 5. Basic Linting
      - name: Run go vet
        run: go vet ./...

      # 6. Build Verification
      - name: Build
        run: go build -v ./...

      # 7. Clone infrastructure repository for database provisioning
      - name: Clone infrastructure repository
        uses: actions/checkout@v4
        with:
          repository: gjaminon-go-labs/infrastructure
          path: infrastructure
          token: ${{ secrets.GITHUB_TOKEN }}

      # 8. Install golang-migrate
      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/
          migrate -version

      # 9. Provision test database using infrastructure scripts
      - name: Provision test database
        working-directory: infrastructure
        run: |
          # Use CI environment file for test database provisioning
          cp dependencies/database/config/.env.ci dependencies/database/config/.env.tst
          
          chmod +x scripts/provision-database.sh
          ./scripts/provision-database.sh tst
          # This creates go-labs-tst with billing schema

      # 10. Run database migrations
      - name: Run database migrations
        run: |
          migrate -path database/migrations -database "postgresql://postgres:postgres@localhost:5432/go-labs-tst?sslmode=disable&search_path=billing" up

      # 11. Unit Tests
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage-unit.out ./tests/unit/...

      # 12. Integration Tests
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/go-labs-tst?sslmode=disable&search_path=billing
          DB_NAME: go-labs-tst
        run: go test -v -race -coverprofile=coverage-integration.out ./tests/integration/...

      # 13. Merge coverage reports
      - name: Merge coverage reports
        run: |
          echo "mode: set" > coverage.out
          tail -n +2 coverage-unit.out >> coverage.out
          tail -n +2 coverage-integration.out >> coverage.out
          
          # Display coverage summary
          go tool cover -func=coverage.out

      # 14. Upload coverage artifact
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage-unit.out
            coverage-integration.out

      # 15. Upload to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out,./coverage-unit.out,./coverage-integration.out
          flags: unittests,integration
          name: billing-api
          fail_ci_if_error: false
          verbose: true

  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest
    needs: test-and-lint  # Only run if tests pass
    if: github.event_name == 'pull_request'  # Only run on PRs
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read  # Allow Claude to read CI results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        continue-on-error: true  # Don't fail the CI if review fails
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Allow Claude to read CI results
          additional_permissions: |
            actions: read

          # Direct prompt for automated Go code review
          direct_prompt: |
            Please review this Go pull request focusing on:

            ## Code Quality
            - Go best practices and idiomatic code
            - Proper error handling patterns
            - Correct use of goroutines and channels (if applicable)
            - Memory management and potential leaks

            ## Architecture
            - Domain-Driven Design principles compliance
            - Repository pattern implementation
            - Clean Architecture layer separation
            - Dependency injection patterns

            ## Testing
            - Test coverage adequacy (minimum 70% for new code)
            - Table-driven test patterns
            - Unit vs integration test separation
            - Mock usage appropriateness

            ## Go-Specific Checks
            - Proper use of interfaces
            - Error wrapping with context
            - Struct field tags correctness
            - Concurrent code safety

            ## TDD Workflow
            - Verify tests were written first (Red-Green-Refactor)
            - Check for overengineering beyond requirements
            - Ensure minimal implementation approach

            ## Security
            - SQL injection prevention
            - Input validation
            - No hardcoded secrets
            - Proper authentication/authorization

            ## Performance
            - Database query optimization
            - N+1 query problems
            - Unnecessary allocations
            - Proper use of pointers vs values

            Review the CI test results and coverage report.
            Be constructive and educational in feedback.
            Highlight both issues and good practices.

          # Use sticky comments for cleaner PR experience
          use_sticky_comment: true

          # Allow Claude to run Go-specific commands for analysis
          allowed_tools: "Bash(go test ./...),Bash(go vet ./...),Bash(go mod tidy),Bash(go fmt ./...)"